#!/usr/bin/env python
import socket
import sys
import IRC
import argparse
import re
from  more_itertools import unique_everseen

class CommandParseError(Exception):
    def __init__(self, msg):
        self.__msg = msg

    def __str__(self):
        return self.__msg

class CommandParseUnimplemented(CommandParseError):
    def __init__(self, msg):
        self.__msg = msg
    def __str__(self):
        return "Unimplemented: %s" % (self.__msg)
    
class CmdArg:
    def __init__(self, regex, error):
        self.__regex = regex
        self.__error = error

    def pattern(self):
        return self.__regex

    def error(self):
        return self.__error

def unhandledCmd(c, *args, **kwargs):
    raise CommandParseUnimplemented(c.name())
    
class Command:
    def __init__(self, name, cmd=unhandledCmd, args=None, extra=False):
        self.__name = name
        if args:
            self.__args = args
        else:
            self.__args = []
        self.__cmd = cmd
        self.__extra = extra
        
    def name(self):
        return self.__name

    def __pattern(self):
        p = "^/" + self.__name
        for a in self.__args:
            p += '\s+(\S+)'
        p += '\s*'
        if self.__extra:
            p += '(.*)'
        p += '$'
        return p
    
    def verify(self, line):        
        m = re.match(self.__pattern(), line)
        if m:
            compare = map (lambda (arg, s): (arg, re.match(arg.pattern(), s), s),  zip(self.__args, m.groups()))
            valid = True
            for (a, v, s) in compare:
                if not v:
                    raise CommandParseError("Invalid Argument: %s, Error: %s" % (s, a.error()))
                    valid = False

            return valid
        else:
            raise CommandParseError("Expected %d argument(s)" % (len(self.__args)))
            return False

    def execute(self, irc, line):
        if not self.verify(line):
            return    
        m = re.match(self.__pattern(), line)
        return self.__cmd(self, irc, *m.groups())

def unique(items):
    return list(unique_everseen(items))
    
def joinCmd(c, irc, channels):
    return irc.cmdJoin(unique(channels.split(',')))

def leaveCmd(c, irc, channels, msg):
    return irc.cmdLeave(unique(channels.split(',')), msg)

def channelsCmd(c, irc):
    return irc.cmdChannels()

def usersCmd(c, irc, channels):
    return irc.cmdUsers(unique(channels.split(',')))

def nickCmd(c, irc, nick):
    return irc.cmdNick(nick)

def quitCmd(c, irc, msg):
    return irc.cmdQuit(msg)

def msgCmd(c, irc, nicks, msg):
    return irc.cmdMsg(msg, unique(nicks.split(',')))

CHANNEL_LIST = "^({channel},)*{channel}$".format(channel=IRC.IRCChannel)
NICK_LIST = "^({nick},)*{nick}$".format(nick=IRC.IRCNick)
COMMANDS = [
    Command('join',
            cmd=joinCmd,
            args=[
                CmdArg(CHANNEL_LIST, "Invalid Channel List")
            ]
    ),
    Command('leave',
            cmd=leaveCmd,
            args=[            
                CmdArg(CHANNEL_LIST, "Invalid Channel List")
            ],
            extra=True
    ),
    Command('channels',
            cmd=channelsCmd
    ),
    Command('users',
            cmd=usersCmd,
            args=[
                CmdArg(CHANNEL_LIST, "Invalid Channel List")
            ]
    ),
    Command('nick',
            cmd=nickCmd,
            args=[
                CmdArg('^{nick}$'.format(nick=IRC.IRCNick), "Invalid NickName")
            ]
    ),
    Command('quit',
            cmd=quitCmd,
            extra=True
    ),
    Command('msg',
            cmd=msgCmd,
            args=[
                CmdArg(NICK_LIST, "Invalid Nickname List")
            ],
            extra=True
    )
]

def isCmd(line):
    if len(line) > 0:
        return line[0] == '/'
    else:
        return False

def processCmd(line):
    irc = IRC.IRC("test")
    if not isCmd(line):
        return irc.sendMsg(line)

    matched_cmd = filter(lambda c: re.match(r'^/{name}\b'.format(name=c.name()), line), COMMANDS)
    
    if len(matched_cmd) == 0:
        raise CommandParseError("Unknown command %s" % re.match("^(/\S+)", line).group(1))
    elif len(matched_cmd) > 1:
        raise BaseException("Multiple command matches")
    
    cmd = matched_cmd[0]
    return cmd.execute(irc, line)
        
    
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="IRC Client")
    parser.add_argument('--hostname', help="Hostname", default="localhost")
    parser.add_argument('--port', type=int, help="Port", default=50000)

    args = parser.parse_args()
    
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    s.connect((args.hostname,args.port))

    while True:
        msg = raw_input()
        try:
            send = processCmd(msg)
            s.send(send)
        except CommandParseError as e:
            print "Error Encountered Parsing Command: %s" % (e)
            
        i = 0
        #data = s.recv(10000000)
        #print data
        #print 'received', len(data), ' bytes'
        
    s.close()
