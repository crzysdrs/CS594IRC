#!/usr/bin/env python
from __future__ import with_statement, print_function
import select
import socket
import sys
import argparse
import petname
import logging
import signal
import time
import json
import jsonschema
import IRC
from IRC.Handler import SocketBuffer
from more_itertools import unique_everseen


def unique(items):
    """ Compute the unique list of the input list """
    return list(unique_everseen(items))


class IRCUser(object):
    """ Representation of an IRC User Connection"""

    def __init__(self, socket, address):
        """ Initialize the IRC User Class"""
        self.__sb = SocketBuffer(socket, misc=self)
        self.__address = address
        self.__name = petname.Generate(2, "")[0:9]
        self.__channels = []
        self.__ping = None
        logging.info('User \'%s\' created.', self)

    def unansweredPing(self):
        """ Does the user still hvae an old ping? """
        return self.__ping != None

    def sendPing(self, server, ping):
        """ Send a ping with the corresponding message to user"""
        self.__ping = ping
        #logging.info("Sending Ping {ping}".format(ping=ping))
        server.sendMsg(self.__sb, server.getIRCMsg().cmdPing(ping))

    def receivedPong(self, pong):
        """ Notify user of received pong with message """
        if self.__ping == None:
            logging.warning("Received a pong where no ping existed.")
            return False
        elif self.__ping != pong:
            logging.warning(
                "Received incorrect pong '{ping}' != '{pong}' ".format(
                    ping=self.__ping,
                    pong=pong
                )
            )
            return False
        else:
            self.__ping = None
            return True

    def getChannels(self):
        """ Get the channels user is in """
        return self.__channels

    def removeChannel(self, c):
        """ Remove user from a channel """
        logging.info(
            "Channels remove {c} to {chan}".format(chan=map(
                lambda a: a.getName(), self.__channels),
                                                   c=c)
        )
        self.__channels.remove(c)

    def addChannel(self, c):
        """ Add the user to a channel """
        logging.info(
            "Channels add {c} from {chan}".format(chan=map(
                lambda a: a.getName(), self.__channels),
                                                  c=c)
        )
        self.__channels.append(c)

    def getName(self):
        """ Get the users name """
        return self.__name

    def changeName(self, name):
        """ Change the users to the newly specified """
        logging.info(
            "User changed name from {old} to {new}.".format(
                old=self.__name,
                new=name
            )
        )
        self.__name = name

    def leave(self, handler):
        """ User has left

        Cleanup all user room connections and close their connection.
        """
        logging.info("User %s left", self)

        chans = list(self.__channels)
        for c in chans:
            c.removeUser(self)

        self.__sb.close()

    def getSocketBuffer(self):
        """ Get the users socket buffer """
        return self.__sb

    def __str__(self):
        """ String Representation of User"""
        return "%s %s" % (self.__name, self.__address)


class IRCChannel(object):
    """ Representation of an IRC Channel"""

    def __init__(self, name):
        """ Initialize Channel """
        self.__name = name
        self.__users = []

    def addUser(self, user):
        """ Add a user to the channel """
        if user not in self.__users:
            self.__users.append(user)
            user.addChannel(self)
        else:
            logging.critical(
                "User {u} added to room {r} multiple times".format(u=user,
                                                                   r=self))

    def removeUser(self, user):
        """ Remove the user from the channel"""

        if user not in self.__users:
            logging.critical(
                "User {u} remove from room {r} it is not in".format(u=user,
                                                                    r=self))
        else:
            self.__users.remove(user)
            user.removeChannel(self)

    def userInChannel(self, user):
        """ Is the user specified in the channel?"""
        return user in self.__users

    def __str__(self):
        """ String representation of channel"""
        return "%s" % (self.__name)

    def getName(self):
        """Gets the name of the channel """
        return str(self)

    def getUsers(self):
        return self.__users


def chunks(l, n):
    """Yield successive n-sized chunks from l."""
    for i in xrange(0, len(l), n):
        yield l[i:i + n]

#Server default name
SERVERNAME = "SERVER"
#Client default name
NEWUSERNAME = "NEWUSER"
#Reserved Names
SPECIALNAMES = [SERVERNAME, NEWUSERNAME]


class IRCServer(IRC.Handler.IRCHandler):
    """ IRCServer

    Uses the IRCHandler base class to manage the low level details
    and provide the high level communications neccesary to manage
    clients
    """

    def __init__(self, host, port):
        """ Initialize Server"""
        super(IRCServer, self).__init__(SERVERNAME, host, port)

        logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
        self.__size = 1024
        self.__rooms = {}
        self.__users = {}
        self.__running = False
        self.__last_ping = 0
        self.__server = None

    def connect(self):
        """ Connect server to port

        Attempts to connect server to the given port
        will return boolean state of connection
        """
        try:
            logging.info("Attempting to start server")
            backlog = 5
            self.__server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.__server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.__server.bind((self.getHost(), self.getPort()))
            self.__server.listen(backlog)
            self.__server = SocketBuffer(self.__server, misc=None)
            logging.info("Server listening.")
            return True
        except socket.error as e:
            if e.errno == 98:
                logging.critical(
                    "Socket Address {host}:{port} already in use. Server already running?".format(
                        host=self.getHost(),
                        port=self.getPort()
                    )
                )
                return False
            else:
                raise e

    def findCreateChannel(self, roomName):
        """ Returns channel desired (creating if neccesary)"""
        channel = self.findChannelByName(roomName)
        if channel != None:
            return channel
        else:
            logging.info('Creating room \'%s\'.', roomName)
            newRoom = IRCChannel(roomName)
            self.__rooms[newRoom.getName()] = newRoom
            return newRoom

    def newUser(self, client, address):
        """ Create a new user to handle a given socket """
        user = IRCUser(client, address)
        userIRC = IRC.Message.IRCMessage(NEWUSERNAME)
        self.sendMsg(user.getSocketBuffer(), userIRC.cmdNick(user.getName()))
        self.__users[user.getName()] = user

    def endUser(self, user, msg):
        """ Ends a user

        Send messages to the subscribed channels that user is leaving
        and removes user from server
        """
        userIRC = IRC.Message.IRCMessage(user.getName())
        logging.info("Attempting to endUser {u}".format(u=user.getName()))

        if user.getName() in self.__users:
            logging.info("endUser {u}".format(u=user.getName()))
            self.sendMsg(user.getSocketBuffer(), userIRC.cmdQuit(msg))

            channels = list(user.getChannels())
            user.leave(self)
            del self.__users[user.getName()]

            for c in channels:
                self.sendMsgToSockets(
                    map(
                        lambda u: u.getSocketBuffer(), c.getUsers()
                    ), userIRC.cmdQuit(msg)
                )

    def timeStep(self):
        """ Tasks done periodically

        Send out pings
        Clean out unused rooms
        """
        if time.time() - self.__last_ping > 2:
            #logging.info("Verifying Pongs/Sending Pings")
            for client in self.__users.values():
                if client.unansweredPing():
                    self.endUser(client, 'No ping response')
                else:
                    client.sendPing(self, str(time.time()))

            #Periodically Cull Empty Rooms
            delete_rooms = filter(
                lambda r: len(r.getUsers()) == 0, self.__rooms.values()
            )

            for c in delete_rooms:
                del self.__rooms[c.getName()]
                logging.info("Room Destroyed {n}".format(n=c.getName()))

            self.__last_ping = time.time()

    def findUserByName(self, name):
        """ Finds a user by given name """
        if name in self.__users:
            return self.__users[name]
        else:
            return None

    def findChannelByName(self, name):
        """ Find channel based on name """
        if name in self.__rooms:
            return self.__rooms[name]
        else:
            return None

    def userNameAvailable(self, name):
        """ Determine if user can change name to specified name """
        if name in self.__users:
            return False
        elif name in SPECIALNAMES:
            return False
        else:
            return True

    def connectionDrop(self, socket):
        """ Notify server of connection drop

        Clean up server user information.
        """
        user = socket.getMisc()
        logging.info("{user} disconnected.".format(user=user.getName()))
        self.endUser(user, 'Connection Drop')

    def getInputSocketList(self):
        """ Provide Handler with desired input sockets """
        inputs = [self.__server]
        inputs.extend(map(lambda u: u.getSocketBuffer(), self.__users.values()))
        return inputs

    def getOutputSocketList(self):
        """ Provide handler with desired output sockets """
        return filter(
            lambda s: s.readyToSend(), map(
                lambda u: u.getSocketBuffer(), self.__users.values()
            )
        )

    def socketInputReady(self, socket):
        """ Determine what to do with the socket input

        In the case of the server, we accept new connections.
        All other communications from clients are considered messages
        """
        if socket == self.__server:
            client, address = self.__server.accept()
            self.newUser(client, address)
        elif type(socket) is SocketBuffer and type(socket.getMisc()) is IRCUser:
            self.receiveMsg(socket)
        else:
            logging.critical(
                "Unknown socket connection %s %s " % (socket, type(socket))
            )

    def socketExceptReady(self, socket):
        """ Notify server of exception on socket """
        pass  # not sure if needs handling

    def validTargets(self, targets):
        """ Determine if message targets exist """
        return all(
            map(
                lambda t: self.findChannelByName(t) != None or self.findUserByName(t) != None,
                targets
            )
        )

    def socketTargets(self, targets):
        """ Convert target strings into socket targets """
        socket_targets = []
        for t in targets:
            channel = self.findChannelByName(t)
            user = self.findUserByName(t)
            if channel != None:
                socket_targets.extend(
                    map(
                        lambda x: x.getSocketBuffer(), channel.getUsers()
                    )
                )
            elif user != None:
                socket_targets.append(user.getSocketBuffer())

        return socket_targets

    def sendMsgToTargets(self, targets, msg):
        """ Sends a given msg to all target locations """
        if not self.validTargets(targets):
            return

        sockets = self.socketTargets(targets)
        sockets = unique(sockets)
        self.sendMsgToSockets(sockets, msg)

    def sendMsgToSockets(self, sockets, msg):
        """ Send a given message to all specified sockets """
        for s in sockets:
            super(IRCServer, self).sendMsg(s, msg)

    def receivedNick(self, socket, src, newnick):
        """ Handle nickname change

        Determine if nickname is valid and provide the user
        the new nickname and notify channels that nick has
        changed
        """
        if self.userNameAvailable(newnick):
            user = socket.getMisc()
            userIRC = IRC.Message.IRCMessage(user.getName())

            #Update Name Lookup with new nickname and remove old
            self.__users[newnick] = user
            del self.__users[user.getName()]

            user.changeName(newnick)
            self.sendMsg(socket, userIRC.cmdNick(newnick))
            for c in user.getChannels():
                self.sendMsgToSockets(
                    map(
                        lambda u: u.getSocketBuffer(), c.getUsers()
                    ), userIRC.cmdNick(newnick)
                )
        else:
            self.sendMsg(
                socket,
                self._ircmsg.errorMsg(
                    "badnick",
                    "{newnick} already in use.".format(newnick=newnick)
                )
            )

    def receivedQuit(self, socket, src, msg):
        """ Handle Quit and disconnect user """
        self.endUser(socket.getMisc(), msg)

    def receivedSQuit(self, socket, msg):
        pass  # server should not receive SQUIT messages

    def receivedJoin(self, socket, src, channels):
        """ Handle Join Request

        Add user to given channel if they are
        not already a member and notify other users
        that they are joined.
        """
        user = socket.getMisc()
        exist_channels = filter(
            lambda c: c != None, map(
                lambda c: self.findChannelByName(c), channels
            )
        )

        if any(map(lambda c: c.userInChannel(user), exist_channels)):
            self.sendMsg(
                socket, self._ircmsg.errorMsg(
                    "member", "Already a member of one or more channels"
                )
            )
        else:
            userIRC = IRC.Message.IRCMessage(user.getName())
            match_channels = map(lambda c: self.findCreateChannel(c), channels)
            for c in match_channels:
                c.addUser(user)
                self.sendMsgToSockets(
                    map(
                        lambda u: u.getSocketBuffer(), c.getUsers()
                    ), userIRC.cmdJoin([c.getName()])
                )
                for chunk in chunks(c.getUsers(), 5):
                    self.sendMsg(
                        socket, self._ircmsg.replyNames(
                            c.getName(), map(lambda u: u.getName(), chunk),
                            False
                        )
                    )
                self.sendMsg(socket, self._ircmsg.replyNames(c.getName(), [],
                                                             False))

    def receivedLeave(self, socket, src, channels, msg):
        """ Handle Leave Command

        User has elected to leave channel. Reply to request (if they are in
        channel) and notify other members in channel.
        """
        user = socket.getMisc()
        match_channels = map(lambda c: self.findChannelByName(c), channels)

        if not all(map(lambda c: c != None, match_channels)):
            self.sendMsg(
                socket, self._ircmsg.errorMsg(
                    "nochannel", "One or more channels does not exist"
                )
            )
        elif not all(map(lambda c: c.userInChannel(user), match_channels)):
            self.sendMsg(
                socket, self._ircmsg.errorMsg(
                    "nonmember", "Not a member in one or more channels"
                )
            )
        else:
            userIRC = IRC.Message.IRCMessage(user.getName())
            for c in match_channels:
                self.sendMsgToSockets(
                    map(
                        lambda u: u.getSocketBuffer(), c.getUsers()
                    ), userIRC.cmdLeave(
                        [c.getName()], msg
                    )
                )
                c.removeUser(user)

    def receivedChannels(self, socket):
        """ Reply with list of channels to user"""
        for c in chunks(map(lambda x: x.getName(), self.__rooms.values()), 5):
            self.sendMsg(socket, self._ircmsg.replyChannels(c))
        self.sendMsg(socket, self._ircmsg.replyChannels([]))

    def receivedUsers(self, socket, channels, client_req):
        """ Reply with list of users from specified channel"""
        if not self.validTargets(channels):
            self.sendMsg(
                socket, self._ircmsg.errorMsg(
                    "nochannel", "One or more channels does not exist"
                )
            )
        else:
            for c in channels:
                chan = self.findChannelByName(c)
                for u in chunks(map(lambda x: x.getName(), chan.getUsers()), 5):
                    self.sendMsg(socket, self._ircmsg.replyNames(c, u,
                                                                 client_req))
                self.sendMsg(socket, self._ircmsg.replyNames(c, [], client_req))

    def receivedPing(self, socket, msg):
        """ Server does not respond to pings"""
        pass  #should not receive pings from users

    def receivedPong(self, socket, msg):
        """ Handle pong by validating repsonse from user"""
        user = socket.getMisc()
        if not user.receivedPong(msg):
            self.endUser(user, 'Unexpected Pong')

    def receivedInvalid(self, socket, msg):
        """ Handle malformed messages from user """
        try:
            jmsg = json.loads(msg)
            jsonschema.validate(jmsg, IRC.Schema.DEFN)
        except ValueError as e:
            logging.info(str(e))
        except jsonschema.exceptions.ValidationError as e:
            logging.info("Schema Message {msg}".format(msg=e.message))
        else:
            logging.error(
                "Schema message passed validation but failed? {msg}".format(
                    msg=msg
                )
            )
            raise BaseException("Improperly handled Validation")

        self.sendMsg(
            socket, self._ircmsg.errorMsg(
                "schema", "Invalid Schema in Request"
            )
        )

    def receivedSignal(self, signal, frame):
        """ Handle Shutdown Gracefully with signal"""
        logging.warning("Server interrupted with Ctrl-C.")
        self.stop()

    def receivedError(self, socket, etype, emsg):
        """ Server does not reply to error messages """
        pass  #Server doesn't care.

    def receivedMsg(self, socket, src, targets, msg):
        """ Received a message command

        Determine if targets are valid and pass message
        to other users as neccesary.
        """
        srcUser = socket.getMisc()
        userIRC = IRC.Message.IRCMessage(srcUser.getName())

        msg = userIRC.cmdMsg(msg, targets)

        if not self.validTargets(targets):
            self.sendMsg(
                socket, self._ircmsg.errorMsg(
                    "nonexist", "One or more channels/users does not exist"
                )
            )
        else:
            self.sendMsgToTargets(targets, msg)

    def receivedNames(self, socket, channel, names, client):
        """ Server will not receive name requests """
        pass  # server should not received messages

    def receivedChannelsReply(self, socket, chnanels):
        """ Server will not receive channels reply"""
        pass  # server should not received messages

    def sentInvalid(self, socket, msg):
        """ Notify server that it has sent an invalid message"""
        logging.error(
            "Attempted to send invalid message {msg} to {user}".format(
                msg=msg,
                user=socket.getMisc().getName()
            )
        )

    def shutdown(self):
        """ Shutdown the server gracefully"""
        logging.info("Shutting down server.")
        self.__running = False
        self.__server.close()
        for u in self.__users.values():
            self.endUser(u, 'Server Shutdown')
        logging.info("Server shut down.")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="IRC Server")
    parser.add_argument('--hostname', help="Hostname", default="localhost")
    parser.add_argument('--port', type=int, help="Port", default=50000)
    parser.add_argument('--log', default=None)

    args = parser.parse_args()

    if args.log != None:
        logging.basicConfig(
            filename=args.log,
            filemode='w',
            level=logging.DEBUG
        )

    server = IRCServer(args.hostname, args.port)
    if server.connect():
        server.run()
